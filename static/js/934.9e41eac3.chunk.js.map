{"version":3,"file":"static/js/934.9e41eac3.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/Components/Profile/My posts/MyPosts.module.css?fd36","webpack://samurai-way/./src/Components/Profile/My posts/Post/Post.module.css?40fc","Components/Profile/My posts/Post/Post.tsx","Form/AddPostForm.tsx","Components/Profile/My posts/MyPosts.tsx","Components/Profile/My posts/MyPostsContainer.tsx","webpack://samurai-way/./src/Components/Profile/ProfileInfo/ProfileInfo.module.css?23b5","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","webpack://samurai-way/./src/Components/common/FormsControls/FormsControls.module.css?c626","Components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__EUhrj\",\"posts\":\"MyPosts_posts__vdlLc\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__sCWAp\"};","import { type } from 'os';\r\nimport React from 'react';\r\nimport s from './Post.module.css'\r\nimport {MyPostType} from \"../../../../redux/profileReducer\";\r\n\r\n\r\n\r\nexport const Post = (props:MyPostType) => {\r\n    return <div>\r\n    \r\n        <div className={s.item}>\r\n            <img src='https://cspromogame.ru//storage/upload_images/avatars/3884.jpg'/>\r\n            {props.message}\r\n            <div>{props.likesCount}</div>\r\n            </div>\r\n      \r\n    </div>\r\n            \r\n};\r\n\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {maxLengthCreator, requiredField} from \"../utils/validators/validators\";\r\nimport {Textarea} from \"../Components/common/FormsControls/FormsControls\";\r\n\r\n\r\n\r\nexport type FormPostType={\r\n    newPost:string\r\n}\r\n\r\n\r\nconst maxLength10=maxLengthCreator(10)\r\nexport const AddPostForm:React.FC<InjectedFormProps<FormPostType>> =(props)=>{\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} name={'newPost'} validate={[requiredField, maxLength10]} placeholder={'Send message'}/>\r\n            <div><button>Add post</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddPostFormRedux=reduxForm <FormPostType> ({form:'profileAddNewPostForm'})(AddPostForm)\r\n\r\n//     <div>\r\n//     <textarea onChange={onPostChange} ref={newPostElement} value={props.newPosts}/>\r\n// <div><button onClick={onAddPost}>Add post</button></div>\r\n// </div>\r\n\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport {Post} from './Post/Post';\r\nimport {AddPostFormRedux, FormPostType} from \"../../../Form/AddPostForm\";\r\n\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    const postsElements = props.myposts.map(p => <Post key={p.id} id={p.id} message={p.message}\r\n                                                       likesCount={p.likesCount}/>)\r\n\r\n    const addNewPost = (value: FormPostType) => {\r\n        props.onAddPost(value.newPost)\r\n    }\r\n\r\n    return <div>\r\n        <div className={s.postsBlock}>\r\n            <h3>My post</h3>\r\n            <AddPostFormRedux onSubmit={addNewPost}/>\r\n        </div>\r\n        <div className={s.posts}>\r\n            {postsElements}\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n});\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {addPostAC, MyPostType} from '../../../redux/profileReducer';\r\nimport {AppStateType} from '../../../redux/reduxStore';\r\nimport {MyPosts} from './MyPosts';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    myposts: MyPostType[]\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    onAddPost: (newPost:string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        myposts: state.profilePage.myposts,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        onAddPost: (newPost) => {\r\n            dispatch(addPostAC(newPost))\r\n        },\r\n\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = compose<React.FC>(connect(mapStateToProps, mapDispatchToProps))(MyPosts)\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__aBVeA\",\"pic\":\"ProfileInfo_pic__e1rh7\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype StatusPropsType = {\r\n    updateUserStatusThunk: (status: string) => void\r\n    status: string\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: StatusPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatusThunk(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>,) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || '----'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input autoFocus={true} onBlur={deactivateEditMode}\r\n                           onChange={onStatusChange}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n\r\n    );\r\n};\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport { ProfilePropsType} from \"../ProfileContainer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\n\r\n\r\nexport const ProfileInfo = (props:ProfilePropsType) => {\r\n    if (!props.profile) {\r\n        return  <Preloader/>\r\n    }\r\n    return (\r\n\r\n            <div>\r\n                {/*<div>*/}\r\n                {/*    <img src=\"https://catherineasquithgallery.com/uploads/posts/2021-03/1614612233_137-p-fon-dlya-fotoshopa-priroda-209.jpg\" className={s.pic}/>*/}\r\n                {/*</div>*/}\r\n                <div  className={s.descriptionBlock}>\r\n                    <img src={props.profile.photos.large}/>\r\n\r\n                   <ProfileStatusWithHooks status={props.status} updateUserStatusThunk={props.updateUserStatusThunk}/>\r\n                </div>\r\n                <div>\r\n                  {props.profile.fullName}\r\n                </div>\r\n                <div>\r\n                   facebook: {props.profile.contacts.facebook}\r\n                </div>\r\n            </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport { MyPostsContainer } from './My posts/MyPostsContainer';\r\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo';\r\nimport { ProfilePropsType} from \"./ProfileContainer\";\r\n\r\n\r\n\r\n\r\nexport const Profile = (props:ProfilePropsType) => {\r\n    return (\r\n\r\n        <div>\r\n            <ProfileInfo {...props} profile={props.profile} status={props.status} updateUserStatusThunk={props.updateUserStatusThunk}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {\r\n    getUserProfileThunk,\r\n    getUserStatusThunk,\r\n    ProfileResponseType,\r\n    updateUserStatusThunk\r\n} from \"../../redux/profileReducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\nexport type PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nexport type MapStateToPropsType = {\r\n    profile: ProfileResponseType | null,\r\n    status: string,\r\n    authorizedUsersId:number,\r\n    isAuth:boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfileThunk: (userId: number) => void\r\n    getUserStatusThunk: (userId: number) => void\r\n    updateUserStatusThunk: (status: string) => void\r\n\r\n}\r\n\r\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass ProfileContainer extends React.Component <PropsType> {\r\n    componentDidMount() {\r\n        let userId = Number(this.props.match.params.userId)\r\n        if (!userId) {\r\n            userId = this.props.authorizedUsersId\r\n            if (!userId){\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfileThunk(userId)\r\n        this.props.getUserStatusThunk(userId)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div>\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile} status={this.props.status}\r\n                         updateUserStatusThunk={this.props.updateUserStatusThunk}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUsersId:state.auth.data?.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\n// const WithUrlDataContainerComponent = withRouter(ProfileC)\r\n//\r\n// export const ProfileContainer = WithAuthRedirect(connect(mapStateToProps, {getUserProfileThunk})(WithUrlDataContainerComponent))\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfileThunk, getUserStatusThunk, updateUserStatusThunk}),\r\n    withRouter,\r\n)(ProfileContainer)\r\n\r\n\r\n// if (!userId && this.props.profile) {\r\n//     userId = this.props.profile.userId\r\n// }","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__r1d3C\",\"error\":\"FormsControls_error__wlcLU\",\"formSummaryError\":\"FormsControls_formSummaryError__bjePL\"};","import React from \"react\";\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport s from './FormsControls.module.css'\r\nimport {requiredField} from \"../../../utils/validators/validators\";\r\n\r\ntype FormsControlType={\r\n    meta:WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormsControlType>=({meta:{touched,error},children})=>{\r\n    const hasError=touched && error\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error:'')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input,meta,...restProps}=props\r\n    return <FormControl {...props}> <textarea {...input} {...restProps}/> </FormControl>\r\n\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input,meta,...restProps}=props\r\n    return <FormControl {...props}> <input {...input} {...restProps}/> </FormControl>\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","export const requiredField=(value:string)=>{\r\n    if (value) return undefined;\r\n    return 'Field is  required'\r\n}\r\n\r\nexport const maxLengthCreator=(maxLength:number)=>(value:string)=>{\r\n    if (value.length>maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\n"],"names":["Post","props","className","s","src","message","likesCount","maxLength10","maxLengthCreator","AddPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","validate","requiredField","placeholder","MyPosts","React","postsElements","myposts","map","p","id","value","onAddPost","newPost","MyPostsContainer","compose","connect","state","profilePage","dispatch","addPostAC","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateUserStatusThunk","onChange","e","currentTarget","ProfileInfo","profile","photos","large","fullName","contacts","facebook","Preloader","Profile","ProfileContainer","userId","Number","this","match","params","authorizedUsersId","history","push","getUserProfileThunk","getUserStatusThunk","auth","data","isAuth","withRouter","FormControl","meta","touched","error","children","hasError","input","restProps","maxLength","length"],"sourceRoot":""}