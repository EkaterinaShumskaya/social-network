{"version":3,"file":"static/js/778.88ee0a52.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/Components/Dialogs/DialogItem/DialogsItem.module.css?3ebf","Components/Dialogs/DialogItem/DialogsItem.tsx","webpack://samurai-way/./src/Components/Dialogs/Dialogs.module.css?db5c","webpack://samurai-way/./src/Components/Dialogs/Message/Message.module.css?687c","Components/Dialogs/Message/Message.tsx","Form/AddMessageForm.tsx","HOC/withAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Dialogs/Dialogs.tsx","webpack://samurai-way/./src/Components/common/FormsControls/FormsControls.module.css?c626","Components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/Components/Profile/My posts/MyPosts.module.css?fd36"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsItems\":\"DialogsItem_dialogsItems__4QIJM\",\"avatar\":\"DialogsItem_avatar__+guts\",\"active\":\"DialogsItem_active__oe+gI\"};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './DialogsItem.module.css'\r\nimport {DialogItemType} from \"../../../redux/dialogsReducer\";\r\n\r\n\r\nexport const DialogItem = (props: DialogItemType) => {\r\n    return (\r\n        <div className={s.dialogsItems}>\r\n            <NavLink to={'/dialogs/' + props.id}>\r\n                {props.name}\r\n                <img className={s.avatar} src={props.avatar} alt={'avatar'}/></NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogsContainer\":\"Dialogs_dialogsContainer__AIHNo\",\"dialogs\":\"Dialogs_dialogs__nUCQ+\",\"sidebar\":\"Dialogs_sidebar__GiQ1n\",\"dialogsMessages\":\"Dialogs_dialogsMessages__Q8rAk\",\"dialogsItems\":\"Dialogs_dialogsItems__wO0kn\",\"addDialogContainer\":\"Dialogs_addDialogContainer__1G3Ee\",\"messageInput\":\"Dialogs_messageInput__oCcw+\"};","// extracted by mini-css-extract-plugin\nexport default {\"messageContainer\":\"Message_messageContainer__LFfOu\",\"message\":\"Message_message__+r-oU\",\"messageBox\":\"Message_messageBox__2ejkv\",\"avatar\":\"Message_avatar__QIjN+\"};","import React from 'react';\r\nimport s from './Message.module.css'\r\nimport {MessageType} from \"../../../redux/dialogsReducer\";\r\n\r\n\r\n\r\n\r\nexport const Message = (props: MessageType) => {\r\n  return (\r\n      <div className={s.messageContainer}>\r\n          <img className={s.avatar} src={props.avatar} alt={'avatar'}/>\r\n        <div className={s.messageBox}>\r\n          <span className={s.message}>{props.message}</span>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Textarea} from \"../Components/common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, requiredField} from \"../utils/validators/validators\";\r\nimport s from '../Components/Profile/My posts/MyPosts.module.css'\r\n\r\n\r\nexport type FormMessageType = {\r\n    newMessageBody: string\r\n}\r\nconst maxLength100 = maxLengthCreator(100)\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormMessageType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea}\r\n                   name={'newMessageBody'}\r\n                   validate={[requiredField, maxLength100]}\r\n                   placeholder={'Enter your message'}\r\n                   style={{width: \"-webkit-fill-available\"}}/>\r\n            <div>\r\n                <button className={s.button}>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<FormMessageType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/reduxStore\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n};","import {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {addMessageAC, dialogsPageType} from '../../redux/dialogsReducer';\r\nimport {AppStateType} from '../../redux/reduxStore';\r\nimport {Dialogs} from './Dialogs';\r\nimport {WithAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\nimport {ComponentType} from \"react\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: dialogsPageType\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & mapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (newMessageBody) => {\r\n            dispatch(addMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs)\r\n\r\n","import React from 'react';\r\nimport {DialogItem,} from './DialogItem/DialogsItem';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport {Message} from './Message/Message';\r\nimport {AddMessageFormRedux, FormMessageType} from \"../../Form/AddMessageForm\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {reset} from \"redux-form\";\r\n\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n\r\n    const messagesElements = props.dialogsPage.messages.map(m => <Message id={m.id} message={m.message}\r\n                                                                          avatar={m.avatar}/>)\r\n    const dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem id={d.id} name={d.name} avatar={d.avatar}/>)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addNewMessage = (values: FormMessageType) => {\r\n        props.addMessage(values.newMessageBody)\r\n        dispatch(reset('dialogAddMessageForm'))\r\n    }\r\n\r\n    return (\r\n        <div className={'app-wrapper-content'}>\r\n            <div className={s.dialogsContainer}>\r\n                <div className={s.sidebar}>\r\n\r\n                </div>\r\n                <div className={s.dialogs}>\r\n                    <div className={s.dialogsItems}>\r\n                        {dialogsElements}\r\n                    </div>\r\n                    <div className={s.dialogsMessages}>\r\n                        {messagesElements}\r\n                    </div>\r\n                    <div className={s.addDialogContainer}>\r\n                        <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__r1d3C\",\"error\":\"FormsControls_error__wlcLU\",\"formSummaryError\":\"FormsControls_formSummaryError__bjePL\"};","import React from \"react\";\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport s from './FormsControls.module.css'\r\n\r\ntype FormsControlType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormsControlType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}> <textarea {...input} {...restProps}/> </FormControl>\r\n\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}> <input {...input} {...restProps}/> </FormControl>\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","export const requiredField=(value:string)=>{\r\n    if (value) return undefined;\r\n    return 'Field is  required'\r\n}\r\n\r\nexport const maxLengthCreator=(maxLength:number)=>(value:string)=>{\r\n    if (value.length>maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__EUhrj\",\"posts\":\"MyPosts_posts__vdlLc\",\"postContainer\":\"MyPosts_postContainer__ErarU\",\"title\":\"MyPosts_title__j4FCV\",\"button\":\"MyPosts_button__2UywY\"};"],"names":["DialogItem","props","className","s","to","id","name","src","avatar","alt","Message","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","placeholder","style","width","mapStateToProps","state","isAuth","auth","compose","connect","dialogsPage","dispatch","addMessage","newMessageBody","addMessageAC","Component","restProps","messagesElements","messages","map","m","dialogsElements","dialogs","d","useDispatch","values","reset","FormControl","meta","touched","error","children","hasError","input","value","maxLength","length"],"sourceRoot":""}