{"version":3,"file":"static/js/144.a3721b38.chunk.js","mappings":"kNACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA4I,0BAA5I,EAAgL,yBAAhL,EAAkN,wB,SCOrMA,EAAa,SAACC,GACzB,OACE,gBAAKC,UAAWC,EAAW,IAAMA,EAAjC,UACE,SAAC,KAAD,CAASC,GAAI,YAAcH,EAAMI,GAAjC,SAAsCJ,EAAMK,UCHrCC,EAAU,SAACN,GACtB,OACE,0BAEA,iBAAKC,UAAWC,EAAhB,cAA6BF,EAAMO,c,uCCFjCC,GAAaC,EAAAA,EAAAA,GAAiB,KAUvBC,GAAoBC,EAAAA,EAAAA,GAA6B,CAACC,KAAK,wBAAnCD,EATyC,SAACX,GACvE,OACI,kBAAMa,SAAUb,EAAMc,aAAtB,WACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EAAUZ,KAAM,iBAAkBa,SAAU,CAACC,EAAAA,EAAcX,GAAeY,YAAa,wBACzG,0BAAK,6C,2CCJXC,EAAgB,SAACC,GACnB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SCM3B,IAeA,GAAeE,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAhBoB,SAACJ,GACrB,MAAO,CACHK,YAAaL,EAAMK,gBAKA,SAACC,GACxB,MAAO,CACHC,WAAY,SAACC,GACTF,GAASG,EAAAA,EAAAA,GAAaD,UDb3B,SAA8BE,GAQjC,OAD2BN,EAAAA,EAAAA,IAAQL,EAARK,EANJ,SAAC1B,GACrB,IAAKuB,EAAqBvB,EAArBuB,OAAUU,GAAf,OAA0BjC,EAA1B,GAEC,OAAKuB,GACE,SAACS,GAAD,UAAeC,KADF,SAAC,KAAD,CAAU9B,GAAI,gBCc1C,EChBuB,SAACH,GAGxB,IAAIkC,EAAiBlC,EAAM2B,YAAYQ,SAASC,KAAI,SAAAC,GAAC,OAAG,SAAC/B,EAAD,CAASF,GAAKiC,EAAEjC,GAAIG,QAAS8B,EAAE9B,aACnF+B,EAAkBtC,EAAM2B,YAAYY,QAAQH,KAAI,SAAAI,GAAC,OAAI,SAACzC,EAAD,CAAYK,GAAIoC,EAAEpC,GAAIC,KAAMmC,EAAEnC,UAevF,OACI,iBAAKJ,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,SACGoC,KAEH,gBAAKrC,UAAWC,EAAhB,SACGgC,KAOD,SAACxB,EAAD,CAAqBG,SAjBT,SAAC4B,GACjBzC,EAAM6B,WAAWY,EAAOX,0B,6ECjC5B,G,QAA8B,oCAA9B,EAAyE,6B,4BCQnEY,EAAwC,SAAC,GAAmC,IAAD,IAAjCC,KAAMC,EAA2B,EAA3BA,QAAQC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC3DC,EAASH,GAAWC,EAC1B,OACI,iBAAK5C,UAAWC,EAAgB,KAAO6C,EAAW7C,EAAQ,IAA1D,WACI,yBACK4C,IAEJC,IAAY,0BAAOF,QAInB5B,EAAwC,SAACjB,GAClD,IAAOgD,EAAyBhD,EAAzBgD,MAAcf,GAAWjC,EAAnB2C,MAAb,OAAgC3C,EAAhC,IACA,OAAO,UAAC0C,GAAD,kBAAiB1C,GAAjB,mBAAyB,uCAAcgD,GAAWf,IAAlD,U,4ECtBJ,IAAMd,EAAc,SAAC8B,GACxB,IAAIA,EACJ,MAAO,sBAGExC,EAAiB,SAACyC,GAAD,OAAoB,SAACD,GAC/C,GAAIA,EAAME,OAAOD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB","sources":["webpack://samurai-way/./src/Components/Dialogs/Dialogs.module.css?db5c","Components/Dialogs/DialogItem/DialogsItem.tsx","Components/Dialogs/Message/Message.tsx","Form/AddMessageForm.tsx","HOC/withAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Dialogs/Dialogs.tsx","webpack://samurai-way/./src/Components/common/FormsControls/FormsControls.module.css?c626","Components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__nUCQ+\",\"dialogsItems\":\"Dialogs_dialogsItems__wO0kn\",\"active\":\"Dialogs_active__OML09\",\"messages\":\"Dialogs_messages__7g1pR\",\"message\":\"Dialogs_message__aJKpc\",\"dialog\":\"Dialogs_dialog__QHq5K\"};","\r\nimport React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './../Dialogs.module.css'\r\nimport {DialogItemType} from \"../../../redux/dialogsReducer\";\r\n\r\n\r\n\r\nexport const DialogItem = (props: DialogItemType) => {\r\n  return (\r\n    <div className={s.dialog + ' ' + s.active }>\r\n      <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import { message } from 'antd';\r\nimport React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {MessageType} from \"../../../redux/dialogsReducer\";\r\n\r\n\r\n\r\n\r\nexport const Message = (props: MessageType) => {\r\n  return (\r\n    <div>\r\n    \r\n    <div className={s.message}> {props.message}</div>\r\n   \r\n    </div>\r\n  )\r\n}\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Textarea} from \"../Components/common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, requiredField} from \"../utils/validators/validators\";\r\n\r\n\r\n\r\nexport type FormMessageType={\r\n    newMessageBody:string\r\n}\r\nconst maxLength100=maxLengthCreator(100)\r\nexport const AddMessageForm:React.FC<InjectedFormProps<FormMessageType>> =(props)=>{\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} name={'newMessageBody'} validate={[requiredField,maxLength100]} placeholder={'Enter your message'}/>\r\n            <div><button>Send</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux=reduxForm <FormMessageType> ({form:'dialogAddMessageForm'})(AddMessageForm)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/reduxStore\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype MapStatePropsType={\r\n    isAuth:boolean\r\n}\r\n\r\n\r\nconst mapStateToProps=(state:AppStateType):MapStatePropsType=>{\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport function WithAuthRedirect <T>(Component:ComponentType<T>) {\r\n   const RedirectComponent=(props:MapStatePropsType)=> {\r\n       let {isAuth,...restProps}=props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\nlet ConnectedRedirectComponent=connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n};","import {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {addMessageAC, dialogsPageType} from '../../redux/dialogsReducer';\r\nimport {AppStateType} from '../../redux/reduxStore';\r\nimport {Dialogs} from './Dialogs';\r\nimport {WithAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\nimport {ComponentType} from \"react\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: dialogsPageType\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & mapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (newMessageBody) => {\r\n            dispatch(addMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs)\r\n\r\n","import React, { ChangeEvent } from 'react';\r\nimport { DialogItem, } from './DialogItem/DialogsItem';\r\nimport s from './Dialogs.module.css'\r\nimport { DialogsPropsType } from './DialogsContainer';\r\nimport { Message } from './Message/Message';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field} from \"redux-form\";\r\nimport {AddMessageFormRedux, FormMessageType} from \"../../Form/AddMessageForm\";\r\n\r\n\r\n// type PropsType={\r\n//   addMessage:()=>void\r\n//   updateNewMessages:(text:string)=>void\r\n//   dialogsPage: dialogsPageType\r\n\r\n \r\n// }\r\n\r\nexport const Dialogs = (props:DialogsPropsType) => {\r\n\r\n \r\nlet messagesElements=props.dialogsPage.messages.map(m=> <Message id= {m.id} message={m.message} />)\r\nlet dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem id={d.id} name={d.name} /> )\r\n  \r\n\r\n// let addMessage=()=>{\r\n//     props.addMessage()\r\n//\r\n// }\r\n// let onMessageChange=(e:ChangeEvent<HTMLTextAreaElement>)=>{\r\n//     let text = e.target.value\r\n// props.updateNewMessages(text)\r\n// };\r\nconst addNewMessage=(values:FormMessageType)=>{\r\n    props.addMessage(values.newMessageBody)\r\n}\r\n\r\nreturn (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>\r\n        {dialogsElements}\r\n      </div>\r\n      <div className={s.messages}>\r\n        {messagesElements}\r\n\r\n      {/*  <textarea value={props.dialogsPage.newMessages} onChange={onMessageChange} placeholder=\"Enter your message\" /> */}\r\n      {/*          <div><button onClick={addMessage}>Send</button></div>*/}\r\n\r\n      {/*</div>*/}\r\n    </div>\r\n        <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n    </div>\r\n  )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__r1d3C\",\"error\":\"FormsControls_error__wlcLU\",\"formSummaryError\":\"FormsControls_formSummaryError__bjePL\"};","import React from \"react\";\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport s from './FormsControls.module.css'\r\nimport {requiredField} from \"../../../utils/validators/validators\";\r\n\r\ntype FormsControlType={\r\n    meta:WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormsControlType>=({meta:{touched,error},children})=>{\r\n    const hasError=touched && error\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error:'')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input,meta,...restProps}=props\r\n    return <FormControl {...props}> <textarea {...input} {...restProps}/> </FormControl>\r\n\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input,meta,...restProps}=props\r\n    return <FormControl {...props}> <input {...input} {...restProps}/> </FormControl>\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","export const requiredField=(value:string)=>{\r\n    if (value) return undefined;\r\n    return 'Field is  required'\r\n}\r\n\r\nexport const maxLengthCreator=(maxLength:number)=>(value:string)=>{\r\n    if (value.length>maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\n"],"names":["DialogItem","props","className","s","to","id","name","Message","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","placeholder","mapStateToProps","state","isAuth","auth","compose","connect","dialogsPage","dispatch","addMessage","newMessageBody","addMessageAC","Component","restProps","messagesElements","messages","map","m","dialogsElements","dialogs","d","values","FormControl","meta","touched","error","children","hasError","input","value","maxLength","length"],"sourceRoot":""}