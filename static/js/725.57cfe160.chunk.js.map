{"version":3,"file":"static/js/725.57cfe160.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/Components/Profile/My posts/Post/Post.module.css?40fc","Components/Profile/My posts/Post/Post.tsx","Form/AddPostForm.tsx","Components/Profile/My posts/MyPosts.tsx","Components/Profile/My posts/MyPostsContainer.tsx","webpack://samurai-way/./src/Components/Profile/ProfileInfo/ProfileInfo.module.css?23b5","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","webpack://samurai-way/./src/Components/Profile/ProfileDataForm/ProfileDataForm.module.css?0aeb","Components/Profile/ProfileDataForm/ProfileDataForm.tsx","webpack://samurai-way/./src/Components/Profile/Profile.module.css?f51d","webpack://samurai-way/./src/Components/Profile/ProfileData/Contact/Contact.module.css?c29d","Components/Profile/ProfileData/Contact/Contact.tsx","Components/Profile/ProfileData/ProfileData.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","webpack://samurai-way/./src/Components/common/FormsControls/FormsControls.module.css?c626","Components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/Components/Profile/My posts/MyPosts.module.css?fd36"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__4Shda\",\"avatarAndName\":\"Post_avatarAndName__gGm5F\",\"avatar\":\"Post_avatar__kH66c\",\"message\":\"Post_message__M76YL\",\"avatarPost\":\"Post_avatarPost__P3lni\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\nimport {FavoriteBorder} from \"@material-ui/icons\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {ProfileResponseType} from \"../../../../redux/profileReducer\";\r\n\r\n\r\ntype PostType = {\r\n    message: string,\r\n    addLike: (id: string) => void,\r\n    id: string,\r\n    likesCount: number,\r\n    profile: ProfileResponseType,\r\n    userName: string\r\n}\r\n\r\n\r\nexport const Post = (props: PostType) => {\r\n    const onClickLikeHandler = () => {\r\n        props.addLike(props.id)\r\n    }\r\n\r\n    return <div>\r\n\r\n        <div className={s.post}>\r\n            <div className={s.avatarAndName}>\r\n                <div>\r\n                    <img src={props.profile.photos.large} className={s.avatarPost}/>\r\n                </div>\r\n                <h5 style={{marginLeft: '5px'}}>{props.userName}</h5>\r\n            </div>\r\n            <span className={s.message}> {props.message}</span>\r\n            <div className={s.likes}>\r\n                <IconButton onClick={onClickLikeHandler} size={'small'}>\r\n                    <FavoriteBorder color={'primary'}/>\r\n                </IconButton>\r\n                <span> {props.likesCount}</span>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n};\r\n\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {maxLengthCreator, requiredField} from \"../utils/validators/validators\";\r\nimport {Textarea} from \"../Components/common/FormsControls/FormsControls\";\r\nimport s from '../../src/Components/Profile/My posts/MyPosts.module.css'\r\n\r\n\r\nexport type FormPostType = {\r\n    newPost: string\r\n}\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(100)\r\nexport const AddPostForm: React.FC<InjectedFormProps<FormPostType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.form}>\r\n            <div className={s.data}>\r\n                <Field component={Textarea} name={'newPost'} validate={[requiredField, maxLength10]}\r\n                       placeholder={'Enter your post'} style={{width: \"-webkit-fill-available\"}}/>\r\n            </div>\r\n\r\n            <div>\r\n                <button className={s.button}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddPostFormRedux = reduxForm<FormPostType>({form: 'profileAddNewPostForm'})(AddPostForm)\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport {Post} from './Post/Post';\r\nimport {AddPostFormRedux, FormPostType} from \"../../../Form/AddPostForm\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {reset} from \"redux-form\";\r\n\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    const postsElements = props.myposts.map(p => <Post key={p.id} id={p.id}\r\n                                                       message={p.message}\r\n                                                       likesCount={p.likesCount}\r\n                                                       addLike={props.addLike}\r\n                                                       profile={props.profile}\r\n                                                       userName={props.userName}/>)\r\n\r\n    const dispatch = useDispatch()\r\n    const addNewPost = (value: FormPostType) => {\r\n        props.onAddPost(value.newPost)\r\n        dispatch(reset('profileAddNewPostForm'))\r\n    }\r\n\r\n    return <div>\r\n        <div className={s.postsBlock}>\r\n            <div className={s.postContainer}>\r\n                <h3 className={s.title}>My post</h3>\r\n                <AddPostFormRedux onSubmit={addNewPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n\r\n\r\n});\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {addLikeAC, addPostAC, MyPostType, ProfileResponseType} from '../../../redux/profileReducer';\r\nimport {AppStateType} from '../../../redux/reduxStore';\r\nimport {MyPosts} from './MyPosts';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    myposts: MyPostType[],\r\n    profile:ProfileResponseType,\r\n    userName:string\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    onAddPost: (newPost: string) => void\r\n    addLike: (id: string) => void\r\n\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        myposts: state.profilePage.myposts,\r\n        profile:state.profilePage.profile,\r\n        userName:state.profilePage.profile.fullName\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        onAddPost: (newPost) => {\r\n            dispatch(addPostAC(newPost))\r\n        },\r\n        addLike: (id: string) => {\r\n            dispatch(addLikeAC(id))\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = compose<React.FC>(connect(mapStateToProps, mapDispatchToProps))(MyPosts)\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"mainContainer\":\"ProfileInfo_mainContainer__L-pUr\",\"avatarContainer\":\"ProfileInfo_avatarContainer__L9ZAr\",\"photo\":\"ProfileInfo_photo__s63fO\",\"infoContainer\":\"ProfileInfo_infoContainer__45e2W\",\"contacts\":\"ProfileInfo_contacts__c9ryi\",\"editButton\":\"ProfileInfo_editButton__DwzGG\",\"container\":\"ProfileInfo_container__gK0tq\",\"button\":\"ProfileInfo_button__bKmpW\",\"Name\":\"ProfileInfo_Name__SPfC1\",\"status\":\"ProfileInfo_status__XAKVz\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype StatusPropsType = {\r\n    updateUserStatusThunk: (status: string) => void\r\n    status: string\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: StatusPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatusThunk(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>,) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b className={s.status}>Status</b>:<span\r\n                    onDoubleClick={activateEditMode}>{props.status || '----'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input autoFocus={true} onBlur={deactivateEditMode}\r\n                           onChange={onStatusChange}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ProfileDataForm_form__A86HM\",\"error\":\"ProfileDataForm_error__E5U4X\",\"button\":\"ProfileDataForm_button__AzM3I\"};","import React, {FC} from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {ProfileResponseType, saveProfile} from \"../../../redux/profileReducer\";\r\nimport {useAppDispatch} from \"../../../redux/reduxStore\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport s from './ProfileDataForm.module.css'\r\n\r\nexport type ProfileDataFormDataType = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\ntype PropsType = {\r\n    onSubmit: (data: ProfileDataFormDataType) => void\r\n    profile: ProfileResponseType\r\n}\r\n\r\ntype FormikErrorType = {\r\n    fullName?: string\r\n    aboutMe?: string\r\n    lookingForAJobDescription?: string\r\n\r\n\r\n}\r\n\r\nexport const ProfileDataForm: FC<PropsType> = (props) => {\r\n    const dispatch = useAppDispatch()\r\n    const model = {\r\n        facebook: '',\r\n        website: '',\r\n        vk: '',\r\n        twitter: '',\r\n        instagram: '',\r\n        youtube: '',\r\n        github: '',\r\n        mainLink: '',\r\n    };\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: '',\r\n            aboutMe: '',\r\n            lookingForAJob: false,\r\n            lookingForAJobDescription: '',\r\n            ...model,\r\n        },\r\n        validate: (values) => {\r\n            let errors: FormikErrorType = {}\r\n            if (!values.fullName) {\r\n                errors.fullName = 'Required'\r\n            }\r\n            if (!values.aboutMe) {\r\n                errors.aboutMe = 'Required'\r\n            }\r\n            if (!values.lookingForAJobDescription) {\r\n                errors.lookingForAJobDescription = 'Required'\r\n            }\r\n\r\n            return errors\r\n        },\r\n        onSubmit: (values: ProfileDataFormDataType) => {\r\n            dispatch(saveProfile(values))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl className={s.formControl}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            type=\"fullName\"\r\n                            label=\"fullName\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('fullName')}\r\n                        />\r\n                        {formik.touched.fullName && formik.errors.fullName &&\r\n                            <div style={{color: 'red'}}> {formik.errors.fullName}</div>}\r\n                        <TextField type=\"aboutMe\"\r\n                                   label=\"aboutMe\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('aboutMe')}\r\n                        />\r\n                        {formik.touched.aboutMe && formik.errors.aboutMe &&\r\n                            <div style={{color: 'red'}}> {formik.errors.aboutMe}</div>}\r\n\r\n                        <FormControlLabel label={'lookingForAJob'} control={\r\n                            <Checkbox\r\n                                checked={formik.values.lookingForAJob}  {...formik.getFieldProps('lookingForAJob')}\r\n                            />}/>\r\n                        <TextField type=\"lookingForAJobDescription\"\r\n                                   label=\"lookingForAJobDescription\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('lookingForAJobDescription')}\r\n                        />\r\n                        {formik.touched.lookingForAJobDescription && formik.errors.lookingForAJobDescription &&\r\n                            <div style={{color: 'red'}}> {formik.errors.lookingForAJobDescription}</div>}\r\n                        {Object.keys(model).map((key) => (\r\n                            <div key={key}>\r\n                                <TextField\r\n                                    type=\"text\"\r\n                                    label={key}\r\n                                    margin=\"normal\"\r\n                                    {...formik.getFieldProps(key)}\r\n                                />\r\n\r\n                            </div>\r\n                        ))}\r\n\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'} className={s.button}>\r\n                            Save\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"containerInfoAndPosts\":\"Profile_containerInfoAndPosts__3ajPW\",\"containerInfo\":\"Profile_containerInfo__McOVL\",\"containerPosts\":\"Profile_containerPosts__QgnZZ\",\"headerContent\":\"Profile_headerContent__aq6AQ\",\"sidebar\":\"Profile_sidebar__uCsTh\",\"data\":\"Profile_data__TnYiL\"};","// extracted by mini-css-extract-plugin\nexport default {\"link\":\"Contact_link__M5GTG\"};","import React, {FC} from \"react\";\r\nimport s from './Contact.module.css'\r\n\r\ntype ContactsPropsType = {\r\n    title: string\r\n    link?: string\r\n}\r\nexport const Contact: FC<ContactsPropsType> = ({title, link}) => {\r\n    return (\r\n        <span style={{margin: \"0 15px\", wordBreak: \"break-word\"}}>\r\n            {title}:\r\n            <a href={link} className={s.link}>{link}</a>\r\n        </span>\r\n    )\r\n}","import s from \"../Profile.module.css\";\r\nimport {Contact} from \"./Contact/Contact\";\r\nimport React, {FC} from \"react\";\r\nimport {ProfileResponseType} from \"../../../redux/profileReducer\";\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileResponseType\r\n}\r\nexport const ProfileData: FC<ProfileDataPropsType> = ({profile}) => {\r\n    return (\r\n        <div className={s.data}>\r\n            <span> About me: {profile.aboutMe} </span>\r\n            <span> Looking for a job: {profile.lookingForAJob ? \"✅\" : \"\"}</span>\r\n            {profile.lookingForAJob && <span> Skills: {profile.lookingForAJobDescription}</span>}\r\n            <span> Contacts: </span>\r\n            {Object.entries(profile.contacts)\r\n                .map(elem => <Contact key={elem[0]} title={elem[0]} link={elem[1]}/>)}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../aseets/image/user.png\";\r\nimport {ProfileResponseType} from \"../../../redux/profileReducer\";\r\nimport {ProfileDataForm, ProfileDataFormDataType} from \"../ProfileDataForm/ProfileDataForm\";\r\nimport {Button, IconButton, Tooltip} from \"@material-ui/core\";\r\nimport {ProfileData} from \"../ProfileData/ProfileData\";\r\nimport {Photo} from \"@material-ui/icons\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileResponseType\r\n    isOwner: boolean,\r\n    savePhotoThunk: (file: File) => void\r\n    saveProfile: (data: ProfileDataFormDataType) => void\r\n    status: string\r\n    updateUserStatusThunk: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const onSubmit = (data: ProfileDataFormDataType) => {\r\n        props.saveProfile(data)\r\n        setEditMode(false)\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            props.savePhotoThunk(e.target.files[0])\r\n        }\r\n    }\r\n    return (\r\n\r\n        <div>\r\n            <div className={s.mainContainer}>\r\n                <div className={s.container}>\r\n                    <div className={s.avatarContainer}>\r\n                        <img src={props.profile.photos.large || userPhoto} className={s.photo}/>\r\n                    </div>\r\n                    {props.isOwner &&\r\n                        <IconButton className={s.button} component=\"label\">\r\n                            <Tooltip title='Change photo' arrow>\r\n                                <Photo/>\r\n                            </Tooltip>\r\n                            <input\r\n                                onChange={onMainPhotoSelected}\r\n                                type=\"file\"\r\n                                hidden\r\n                                accept=\"image/png, image/jpeg\"\r\n                            />\r\n                        </IconButton>\r\n                    }\r\n                </div>\r\n\r\n                <div className={s.infoContainer}>\r\n                    <div className={s.Name}>{props.profile.fullName}</div>\r\n                    <ProfileStatusWithHooks status={props.status} updateUserStatusThunk={props.updateUserStatusThunk}/>\r\n                    {editMode\r\n                        ? <ProfileDataForm onSubmit={onSubmit} profile={props.profile}/>\r\n                        : <ProfileData profile={props.profile}/>}\r\n                    {props.isOwner && !editMode\r\n                        && <Button onClick={() => setEditMode(true)}\r\n                                   variant='contained'\r\n                                   color='primary'\r\n                                   className={s.editButton}\r\n                        >\r\n                            Edit\r\n                        </Button>}\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {MyPostsContainer} from './My posts/MyPostsContainer';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {ProfilePropsType} from \"./ProfileContainer\";\r\nimport s from './Profile.module.css'\r\n\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    return (\r\n\r\n        <div className={'content'}>\r\n            <div>\r\n                <img className={s.headerContent} alt='big content'\r\n                     src='https://themified.com/friend-finder/images/covers/1.jpg'/>\r\n            </div>\r\n            <div className={s.containerInfoAndPosts}>\r\n                <div className={s.containerInfo}>\r\n\r\n                    <ProfileInfo {...props} saveProfile={props.saveProfile}\r\n                                 savePhotoThunk={props.savePhotoThunk}\r\n                                 isOwner={props.isOwner}\r\n                                 profile={props.profile}\r\n                                 status={props.status}\r\n                                 updateUserStatusThunk={props.updateUserStatusThunk}/>\r\n                </div>\r\n                <div className={s.containerPosts}>\r\n                    <MyPostsContainer/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {\r\n    getUserProfileThunk,\r\n    getUserStatusThunk,\r\n    ProfileResponseType, savePhotoThunk, saveProfile,\r\n    updateUserStatusThunk\r\n} from \"../../redux/profileReducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileDataFormDataType} from \"./ProfileDataForm/ProfileDataForm\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\nexport type PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nexport type MapStateToPropsType = {\r\n    profile: ProfileResponseType,\r\n    status: string,\r\n    authorizedUsersId: number,\r\n    isAuth: boolean,\r\n    isOwner: boolean,\r\n\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfileThunk: (userId: number) => void\r\n    getUserStatusThunk: (userId: number) => void\r\n    updateUserStatusThunk: (status: string) => void\r\n    savePhotoThunk: (file: File) => void\r\n    saveProfile: (data: ProfileDataFormDataType) => void\r\n\r\n\r\n}\r\n\r\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass ProfileContainer extends React.Component <PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = Number(this.props.match.params.userId)\r\n        if (!userId) {\r\n            userId = this.props.authorizedUsersId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfileThunk(userId)\r\n        this.props.getUserStatusThunk(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\r\n            this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile} status={this.props.status}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         updateUserStatusThunk={this.props.updateUserStatusThunk}\r\n                         savePhotoThunk={this.props.savePhotoThunk}\r\n                         saveProfile={this.props.saveProfile}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUsersId: state.auth.data?.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\n// const WithUrlDataContainerComponent = withRouter(ProfileC)\r\n//\r\n// export const ProfileContainer = WithAuthRedirect(connect(mapStateToProps, {getUserProfileThunk})(WithUrlDataContainerComponent))\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfileThunk,\r\n        getUserStatusThunk,\r\n        updateUserStatusThunk,\r\n        savePhotoThunk,\r\n        saveProfile\r\n    }),\r\n    withRouter,\r\n)(ProfileContainer)\r\n\r\n\r\n// if (!userId && this.props.profile) {\r\n//     userId = this.props.profile.userId\r\n// }","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__r1d3C\",\"error\":\"FormsControls_error__wlcLU\",\"formSummaryError\":\"FormsControls_formSummaryError__bjePL\"};","import React from \"react\";\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport s from './FormsControls.module.css'\r\n\r\ntype FormsControlType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormsControlType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}> <textarea {...input} {...restProps}/> </FormControl>\r\n\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}> <input {...input} {...restProps}/> </FormControl>\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","export const requiredField=(value:string)=>{\r\n    if (value) return undefined;\r\n    return 'Field is  required'\r\n}\r\n\r\nexport const maxLengthCreator=(maxLength:number)=>(value:string)=>{\r\n    if (value.length>maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__EUhrj\",\"posts\":\"MyPosts_posts__vdlLc\",\"postContainer\":\"MyPosts_postContainer__ErarU\",\"title\":\"MyPosts_title__j4FCV\",\"button\":\"MyPosts_button__2UywY\"};"],"names":["Post","props","className","s","src","profile","photos","large","style","marginLeft","userName","message","IconButton","onClick","addLike","id","size","FavoriteBorder","color","likesCount","maxLength10","maxLengthCreator","AddPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","validate","requiredField","placeholder","width","MyPosts","React","postsElements","myposts","map","p","dispatch","useDispatch","value","onAddPost","newPost","reset","MyPostsContainer","compose","connect","state","profilePage","fullName","addPostAC","addLikeAC","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateUserStatusThunk","onChange","e","currentTarget","ProfileDataForm","useAppDispatch","model","facebook","website","vk","twitter","instagram","youtube","github","mainLink","formik","useFormik","initialValues","aboutMe","lookingForAJob","lookingForAJobDescription","values","errors","saveProfile","resetForm","Grid","container","justifyContent","item","FormControl","FormGroup","TextField","type","label","margin","getFieldProps","touched","FormControlLabel","control","Checkbox","checked","Object","keys","key","Button","variant","Contact","title","link","wordBreak","href","ProfileData","entries","contacts","elem","ProfileInfo","userPhoto","isOwner","Tooltip","arrow","Photo","target","files","length","savePhotoThunk","hidden","accept","data","Profile","alt","ProfileContainer","userId","Number","this","match","params","authorizedUsersId","history","push","getUserProfileThunk","getUserStatusThunk","refreshProfile","prevProps","auth","isAuth","withRouter","meta","error","children","hasError","input","restProps","maxLength"],"sourceRoot":""}